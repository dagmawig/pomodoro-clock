{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","session","break","formattedTime","running","sessionOn","content","sessionLength","breakLength","newSession","startLabel","startTime","bind","startStopIt","resetTime","formatTime","changeLength","play","interval","undefined","beepLink","document","getElementById","currentTime","this","setState","clearInterval","setInterval","pause","e","target","id","a","min","Math","floor","sec","className","onClick","src","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.25681dce.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss'\n// function App() {\n//   return (\n//     <div className=\"App\">\n      \n//     </div>\n//   );\n// }\n\n//This React App Creates a POMODORO Clock\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state={\n      session: 1500, break: 300, formattedTime: \"25:00\", running: false, sessionOn: true, content: \"Session\", sessionLength: 1500, breakLength: 300, newSession: true, startLabel: \"Start\"\n    }\n    this.startTime = this.startTime.bind(this)\n    this.startStopIt = this.startStopIt.bind(this)\n    this.resetTime = this.resetTime.bind(this)\n    this.formatTime = this.formatTime.bind(this)\n    this.changeLength = this.changeLength.bind(this)\n    this.play = this.play.bind(this)\n    this.interval = undefined\n    this.beepLink = \"https://freesound.org/data/previews/174/174027_3242494-lq.mp3\"\n  }\n  \n  //play method plays a beeping sound when session or break time runs out\n  play(){\n    document.getElementById('beep').play()\n  }\n  \n  //startTime method handles the countdown of both session and break times and updates states as necessary\n  startTime(){ \n   let currentTime = (this.state.sessionOn)? this.state.session:this.state.break;\n   let content = this.state.sessionOn? \"Break\" : \"Session\"\n   let sessionOn = !this.state.sessionOn\n   if(currentTime > 0){\n     currentTime -=1\n     let formattedTime = this.formatTime(currentTime)\n     this.setState((state,props)=>({[state.sessionOn? 'session' : 'break']: currentTime, formattedTime: formattedTime, newSession: false}))\n   }\n    else if(currentTime == 0){\n    this.play()\n    this.setState((state,props)=>({session: state.sessionLength, break: state.breakLength, formattedTime: state.sessionOn? this.formatTime(state.break) : this.formatTime(state.session), sessionOn: sessionOn, content: content}))\n    } \n  }\n  \n  //startStopIt method starts and stops clock\n  startStopIt(){\n    if(!this.state.running){\n      this.setState({running: true, startLabel: \"Stop\"}, ()=>{this.interval = setInterval(this.startTime, 1000)}) \n    }\n    else{\n      this.setState({running: false, startLabel: \"Start\"}, ()=>{clearInterval(this.interval)})\n    } \n  }\n  \n  //resetTime method resets clock and states to default values\n  resetTime(){\n    document.getElementById('beep').pause()\n    document.getElementById('beep').currentTime = 0.0\n    this.setState((state, props)=>({session: 1500, break: 300, formattedTime: \"25:00\", running: false, sessionOn: true, content: \"Session\", sessionLength: 1500, breakLength: 300, newSession: true, startLabel: \"Start\"}), ()=>{clearInterval(this.interval)})\n  }\n  \n  //changeLength method updates the lengths of the upcoming session and break times based on user's input\n  changeLength(e){\n    if(e.target.id == \"break-decrement\" && this.state.breakLength > 60){this.setState((state, props)=>({breakLength: state.breakLength - 60}))}\n    else if(e.target.id == \"break-increment\" && this.state.breakLength < 3600){this.setState((state, props)=>({breakLength: state.breakLength + 60}))}\n    else if(e.target.id == \"session-decrement\" && this.state.sessionLength > 60){this.setState((state, props)=>({sessionLength: state.sessionLength - 60}),\n                                      ()=>{if(this.state.newSession){this.setState((state,props)=>({session: state.sessionLength, formattedTime: this.formatTime(state.sessionLength)}))}}\n                                                                                              )}\n    else if(e.target.id == \"session-increment\" && this.state.sessionLength < 3600){this.setState((state, props)=>({sessionLength: state.sessionLength + 60}),\n                                      ()=>{if(this.state.newSession){this.setState((state,props)=>({session: state.sessionLength, formattedTime: this.formatTime(state.sessionLength)}))}}\n                                                                                                )}\n  }\n  \n  //formatTime method takes time in seconds and returns it in mm:ss format\n  formatTime(a){\n    let min = Math.floor(a/60)\n    let sec = a%60\n    if(min<10) min = `0${min}`\n    if(sec<10) sec = `0${sec}`\n    return `${min}:${sec}`\n  }\n  \n  render(){\n    return(\n    <div id=\"pomodoro\">\n        <div id=\"header\">POMODORO CLOCK</div>\n        <div id=\"break-label\">Break Length</div>\n         <div id=\"break-length\">{Math.floor(this.state.breakLength/60)} min</div>\n        <div id=\"session-label\">Session Length</div>\n        <div id=\"session-length\">{Math.floor(this.state.sessionLength/60)} min</div>\n        <button className='button' id=\"break-increment\" onClick={this.changeLength}>Increase Break</button>\n        <button className='button' id=\"break-decrement\" onClick={this.changeLength}>Decrease Break</button>\n         <button className='button' id=\"session-increment\" onClick={this.changeLength}>Increase Session</button> \n        <button className='button' id=\"session-decrement\" onClick={this.changeLength}>Decrease Session</button>\n        <div id=\"timer-label\">{this.state.content}</div>\n        <div id=\"time-left\">{this.state.formattedTime}<audio id=\"beep\">\n          <source src={this.beepLink}></source>\n        </audio></div>\n        \n        <button className='button' id=\"start_stop\" onClick={this.startStopIt}>{this.state.startLabel}</button>\n        <button className='button' id=\"reset\" onClick={this.resetTime}>Reset</button>\n        </div>\n      );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}